<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using LemonInc.Core.StateMachine.Interfaces;
using UnityEngine;
using System.Collections.Generic;

namespace LemonInc.Core.StateMachine
{
    // <auto-generated>
    //     This code was generated by a template.
    // </auto-generated>
    public partial class StateMachine
    {
        <# const int MaxTypeParams = 15; #>

        <# for (int i = 2; i <= MaxTypeParams; i++) { 
            var typeParams = string.Join(", ", Enumerable.Range(1, i).Select(n => $"T{n}"));
            var whereClauses = string.Join("\n        ", Enumerable.Range(1, i).Select(n => $"where T{n} : IState"));
            var stateVars = string.Join("\n        ", Enumerable.Range(1, i).Select(n => $"var state{n} = _nodes.GetValueOrDefault(typeof(T{n}));"));
            var stateChecks = string.Join("\n        ", Enumerable.Range(1, i).Select(n => $"if (state{n} == null)" +
                "\n        {" +
                $"\n            Debug.LogError($\"Tried to register transition to unregistered state: {{typeof(T{n}).Name}}\");" +
                "\n            return null;" +
                "\n        }"));
            var groupParams = string.Join(", ", Enumerable.Range(1, i).Select(n => $"state{n}.State"));
        #>
        public StateGroup CreateGroup<<#= typeParams #>>()
            <#= whereClauses #>
        {
            <#= stateVars #>

            <#= stateChecks #>

            var group = new StateGroup(this, <#= groupParams #>);
            _groups.Add(group);
            return group;
        }
        <# } #>
    }
}
