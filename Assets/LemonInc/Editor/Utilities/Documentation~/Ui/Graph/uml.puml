@startuml "uml"
skinparam packageStyle rect

interface INode {
    +Id: string
    +Alias: string
    +Position: Vector2
    +Metadata: Dictionary<string, object>
    +Copy(): INode
}

interface INodeController<TNodeData> {
    +GetAllNodes(): IEnumerable<TNodeData>
    +CreateNodeOfType(type: Type): TNodeData
    +Add(node: TNodeData): void
    +Delete(node: TNodeData): void
    +Duplicate(node: TNodeData): TNodeData
    +Link(inputNode: TNodeData, outputNode: TNodeData): void
    +Unlink(inputNode: TNodeData, outputNode: TNodeData): void
    +GetRelated(node: TNodeData): IEnumerable<TNodeData>
}

abstract class GraphViewBase<TNodeView, TNodeData> {
    +OnNodeCreatedCallback: Action<TNodeView>
    +OnNodeSelectedCallback: Action<TNodeView>
    +OnNodeUnSelectedCallback: Action<TNodeView>
    +OnEdgeSelectedCallback: Action<EdgeView>
    +OnEdgeUnSelectedCallback: Action<EdgeView>
    +AddStyle(styleSheet: StyleSheet): void
    +Populate(): void
    +GetCompatiblePorts(startPort: Port, nodeAdapter: NodeAdapter): List<Port>
}

abstract class NodeViewBase<TNodeData> {
    +OnNodeSelectedEvent: Action<TNodeData>
    +OnNodeUnSelectedEvent: Action<TNodeData>
    +Data: TNodeData
    +InputPorts: Port[]
    +OutputPorts: Port[]
    +Bind(data: TNodeData): void
    +LinkPorts(nodes: List<NodeViewBase<TNodeData>>): List<EdgeView>
    +InstantiateInputPorts(): IEnumerable<Port>
    +InstantiateOutputPorts(): IEnumerable<Port>
    +SetPosition(newPos: Rect): void
    +OnSelected(): void
    +OnUnselected(): void
}

INode <|.. INodeController
INodeController <|.. GraphViewBase
NodeViewBase <|.. GraphViewBase
NodeViewBase <|.. INodeController
GraphViewBase <|.. INodeController

@enduml
