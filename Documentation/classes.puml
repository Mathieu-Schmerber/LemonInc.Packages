@startuml   Pooling UML

package Unity {
    class MonoBehaviour {
    
    }
}

package Contracts {

    interface IPoolProvider {
        TPool CreatePoolOfType<TPool>()
        TPool GetOfType<TPool>()
        IPool CreatePoolForType<TPoolable>()
        IPool<TPoolable> GetPoolForType<TPoolable>()
    }

    interface IPool {
        Populate()
        GameObject Get(object data, callback onInititialized = null)
        GameObject Get(object data, Vector3 position, Quaternion rotation, callback onInititialized = null)
        void Release(IPoolable)
        void ReleaseAll(PoolState ofState = BUSY)
    }

    interface IPoolable<T> {
        GameObject Instance
        PoolState State
        Initialize(IPool owner, object data)
        Release()
    }

    enum PoolState {
        FREE
        BUSY
    }

    abstract PoolableBase<T> {
        # OnReleasing()
    }

    PoolState <-- ObjectPool
    IPoolable <-- ObjectPool
    IPoolable <|-- PoolableBase
}

package Implementations {
    class ObjectPool {
        # IDictionary<PoolState, IPoolable[]> Pool
    }
}

MonoBehaviour <|-- PoolableBase

@enduml